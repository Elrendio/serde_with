language: rust
sudo: true
cache: cargo

notifications:
  email: false

branches:
  only:
    # Enable building pull requests.
    - master
    # This is where pull requests from "bors r+" are built.
    - staging
    # This is where pull requests from "bors try" are built.
    - trying

matrix:
  include:
    - name: "Bors (1.26.2)"
      if: branch = staging OR branch = trying OR type = cron
      rust: 1.26.2
    - name: "Bors (stable)"
      if: branch = staging OR branch = trying OR type = cron
      rust: stable
    - name: "Bors (beta)"
      if: branch = staging OR branch = trying OR type = cron
      rust: beta
    - name: "Bors (nightly)"
      if: branch = staging OR branch = trying OR type = cron
      rust: nightly
    - name: "PR Open"
      if: type = pull_request AND branch = master
      rust: nightly
    - name: "Minimal Versions"
      if: branch = staging OR branch = trying OR type = cron OR ( type = pull_request AND branch = master )
      rust: nightly
      script:
        - set -e
        - cargo generate-lockfile -Z minimal-versions
        - cargo build --verbose --all --all-features
        - cargo test --verbose --all --all-features

# https://levans.fr/rust_travis_cache.html
# Need to cache the whole `.cargo` directory to keep .crates.toml for
# cargo-update to work
cache:
  directories:
    - /home/travis/.cargo

# But don't cache the cargo registry
before_cache:
  - rm -rf /home/travis/.cargo/registry

env:
  global:
  - RUSTFLAGS="-C link-dead-code"

addons:
  apt:
    packages:
      - libssl-dev

before_script:
  # Allow this step to fail in case clippy is not available for whatever reason
  - ( rustup component add clippy-preview || true )
  - export PATH=$HOME/.cargo/bin:$PATH
  - which cargo-install-update || cargo install cargo-update
  # Update cargo metadata to make cargo install-update work
  - cargo fetch
  # Install or update cargo tarpaulin
  - |
    if [[ "$TRAVIS_RUST_VERSION" == nightly ]]; then
      which cargo-tarpaulin || env RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install-update --allow-no-update cargo-tarpaulin
    fi
  # Update all tools
  - cargo install-update -a

script:
  - set -e
  - |
    for FEATURES_COMMAND in "--no-default-features" "" "--features=chrono" "--features=json" "--all-features"
    do
      cargo build --verbose --all ${FEATURES_COMMAND}
      # skip this step if clippy is not available, e.g., bad nightly
      # `|| true` to make the command always succeed, because the `set -e` would fail otherwise
      ( which cargo-clippy >/dev/null 2>&1 && cargo clippy --verbose --all ${FEATURES_COMMAND} ) || true
      cargo test --verbose --all ${FEATURES_COMMAND}
    done

after_success:
  - |
    if [[ "$TRAVIS_RUST_VERSION" == nightly ]]; then
      # Uncomment the following two lines create and upload a report for codecov.io
      cargo tarpaulin --out Xml --skip-clean --all --all-features
      bash <(curl -s https://codecov.io/bash)
      echo "CodeCov Uploading of data was successful!"
    fi
